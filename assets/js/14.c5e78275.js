(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{499:function(t,a,s){"use strict";s.r(a);var e=s(28),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1、问题的由来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、问题的由来"}},[t._v("#")]),t._v(" 1、问题的由来")]),t._v(" "),s("p",[t._v("笔者曾在浏览技术文章，来学习http cache的知识。讲到的最多的当然是强缓存和协商缓存。关于各个字段的含义，我们可以找到这张图：")]),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/httpcachejpg.jpg",alt:"字段含义",width:"500"}}),t._v(" "),s("p",[t._v("多数文章会告诉我们Response Header里的Cache-Control各个取值，代表着不同的含义。但很少有文章提及到Request Header里的Cache-Control。有一天发现：")]),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/ed82b983d6c74ddcacc53a6220800c5e_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp.jpg",alt:"字段含义",width:"500"}}),t._v(" "),s("p",[t._v("这是chrome刷新中，选择硬性重新加载，浏览器请求一个静态js文件的请求头。当时并不知道和响应头里的Cache-Control有啥区别。曾一度认为请求头里的Cache-Control是无效的。直到某一天，自己用nodejs实现了一次缓存设置。")]),t._v(" "),s("h2",{attrs:{id:"_2、背景知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、背景知识"}},[t._v("#")]),t._v(" 2、背景知识")]),t._v(" "),s("h3",{attrs:{id:"浏览器处理http-cache的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器处理http-cache的优先级"}},[t._v("#")]),t._v(" 浏览器处理http cache的优先级")]),t._v(" "),s("p",[t._v("这里简单概括下顺序")]),t._v(" "),s("ol",[s("li",[t._v("先判断资源是否命中强缓存，命中则直接从disk里拿到资源；")]),t._v(" "),s("li",[t._v("如果没有命中强缓存，判断是否命中协商缓存，命中则走协商缓存；")]),t._v(" "),s("li",[t._v("如果命中了协商缓存，会发起请求，服务端根据Request Header里的If-None-Match（对应Etag）和If-Modified-Since（对应Last-Modified）判断资源是否过期，没过期则返回304状态码，浏览器依旧用disk里的资源。如果资源过期，则服务端会返回新的资源；")]),t._v(" "),s("li",[t._v("如果也没有命中协商缓存，则这个请求不走缓存策略，发起真实的请求，从服务端拿资源；")])]),t._v(" "),s("h3",{attrs:{id:"chrome的network面板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chrome的network面板"}},[t._v("#")]),t._v(" chrome的Network面板")]),t._v(" "),s("p",[t._v("一个典型的截图如下：")]),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/c723b1be695e488283492af587dd8aed_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp",alt:"字段含义",width:"500"}}),t._v(" "),s("p",[t._v("Initiator理解为发起请求的对象，有以下值：")]),t._v(" "),s("ul",[s("li",[t._v("Parser  ：请求是由页面的html解析时发送，一般显示html的名称")]),t._v(" "),s("li",[t._v("Redirect：请求是由页面重定向发送，暂时没遇到过")]),t._v(" "),s("li",[t._v("script  ：请求是由script脚本处理发送，一般显示script脚本文件的名称")]),t._v(" "),s("li",[t._v("Other   ：请求是由其他过程发送的，比如页面里的Link链接点击。一般请求结果是html内容\nSize的值理解为请求内容的大小，Time理解为请求消耗的时间：")]),t._v(" "),s("li",[t._v("174B表示发起了实际的请求，这种请求一般时间不会是0;")]),t._v(" "),s("li",[t._v("memory cache表示是从内存中读取的缓存资源，速度极快，一般都是0ms；")]),t._v(" "),s("li",[t._v("disk cache表示从磁盘中读取的缓存资源，速度比memory cache慢，但比发起实际的请求要快；\n需要注意的是，memory cache和disk cache虽然没有发起实际的请求，但都会有200的状态码，如下图：")])]),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/c85abebbec774ffeb950e63b0eeb24c7_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp",alt:"字段含义",width:"500"}}),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/48c6837e29674f5a89791d70e613625a_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp",alt:"字段含义",width:"500"}}),t._v(" "),s("h2",{attrs:{id:"_3、浏览器访问页面的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、浏览器访问页面的操作"}},[t._v("#")]),t._v(" 3、浏览器访问页面的操作")]),t._v(" "),s("h3",{attrs:{id:"刷新按钮的三个选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刷新按钮的三个选项"}},[t._v("#")]),t._v(" 刷新按钮的三个选项")]),t._v(" "),s("img",{attrs:{src:"/blog/imgs/01前端/123784cecefa46b79da7f0a6a532bb2f_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp",alt:"字段含义",width:"500"}}),t._v(" "),s("h3",{attrs:{id:"访问页面的4种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问页面的4种方式"}},[t._v("#")]),t._v(" 访问页面的4种方式")]),t._v(" "),s("h4",{attrs:{id:"地址栏回车、页面链接跳转、打开新窗口-标签页、history前进后退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址栏回车、页面链接跳转、打开新窗口-标签页、history前进后退"}},[t._v("#")]),t._v(" 地址栏回车、页面链接跳转、打开新窗口/标签页、history前进后退")]),t._v(" "),s("p",[t._v("这种方式会从强缓存开始判断，是用户浏览网页中最常用的方式。")]),t._v(" "),s("h4",{attrs:{id:"点击刷新按钮、页面右键重新加载、f5、ctrl-r"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点击刷新按钮、页面右键重新加载、f5、ctrl-r"}},[t._v("#")]),t._v(" 点击刷新按钮、页面右键重新加载、f5、ctrl+R")]),t._v(" "),s("p",[t._v("这种方式会跳过强缓存，直接从协商缓存开始判断。\n但需要注意的是Initiator值为Other的内容才会走协商缓存（通常只有一个，是html内容）。其他的内容，因为是从html里引入的（如script,link,img等），或者从script文件动态引入的。他们的Initiator通常是一个html文件，或者script文件，这些资源还是会依照自己的规则，从强缓存开始判断；")]),t._v(" "),s("p",[s("strong",[t._v("这种方式会在Request Header里添加Cache-Control:max-age=0")]),t._v("，这是浏览器自己的行为")]),t._v(" "),s("h4",{attrs:{id:"硬性重新加载、ctrl-f5、ctrl-shift-r、勾选disable-cache后点刷新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#硬性重新加载、ctrl-f5、ctrl-shift-r、勾选disable-cache后点刷新"}},[t._v("#")]),t._v(" 硬性重新加载、Ctrl+f5、Ctrl+Shift+R、勾选Disable cache后点刷新")]),t._v(" "),s("p",[t._v("这种方式，所有的资源（不论Initiator的值），都会跳过缓存判断，发起真实的请求，从服务端拿资源。但本地的缓存资源(如disk里的缓存)并没有删除。\n"),s("strong",[t._v("这种方式会在Request Header里添加Cache-Control:no-cache和Pragma: no-cache")]),t._v("，也是浏览器自己的行为")]),t._v(" "),s("h4",{attrs:{id:"清空缓存并硬性重新加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清空缓存并硬性重新加载"}},[t._v("#")]),t._v(" 清空缓存并硬性重新加载")]),t._v(" "),s("p",[t._v("这种方式，相当于先删除缓存（如disk里的缓存），再执行硬性重新加载")]),t._v(" "),s("h2",{attrs:{id:"_4、不同之处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、不同之处"}},[t._v("#")]),t._v(" 4、不同之处")]),t._v(" "),s("p",[t._v("从访问页面的4种方式里，可以看出。在点刷新按钮、或者硬性重新加载等时，因为"),s("strong",[t._v("浏览器自己的行为")]),t._v("，会在Request Header里加入对应的Cache-Control值")]),t._v(" "),s("p",[t._v("需要弄清楚的是：\n"),s("strong",[t._v("请求头里的Cache-Control影响的是当前这一次请求，响应头里的Cache-Control是告诉浏览器这样存储，下次依照这样来。影响的是下一次请求。")]),t._v("\n一般以上边的方式1(如url回车)访问时，默认是按照上次给的规则来。但浏览器在真正的发起这次请求时，可以有自己的行为，比如硬性重新加载，不走缓存")]),t._v(" "),s("h3",{attrs:{id:"request-header里cache-control的取值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#request-header里cache-control的取值"}},[t._v("#")]),t._v(" Request Header里Cache-Control的取值")]),t._v(" "),s("h4",{attrs:{id:"cache-control-max-age-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-max-age-0"}},[t._v("#")]),t._v(" Cache-Control:max-age=0")]),t._v(" "),s("p",[t._v("这个值表示，这个请求按照协商缓存的规则走，一定会发出真实的请求。这里和响应头里的max-age=0有不同")]),t._v(" "),s("h4",{attrs:{id:"cache-control-no-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-no-cache"}},[t._v("#")]),t._v(" Cache-Control:no-cache")]),t._v(" "),s("p",[t._v("这个值一般会附带Pragma: no-cache，是为了兼容http1.0。"),s("strong",[t._v("表示这次请求不会读缓存资源，即便缓存没有过期，或者资源并没有修改")]),t._v("，这样的请求不会有返回304的可能。这一点和响应头里的Cache-Control:no-cache是有区别的。")]),t._v(" "),s("p",[s("strong",[t._v("Request Header里Cache-Control只有这两个值可取，设置其他的值无效")]),t._v("，比如设置Cache-Control:no-store是没有用的，这一点要和响应头里的Cache-Control区分开。")]),t._v(" "),s("p",[s("strong",[t._v("Request Header里的Cache-Control只有在浏览器刷新，硬性重新加载。这两种浏览器自己的行为中会被添加。")]),t._v("\n如果是一个常规的，设置了协商缓存（响应头里Cache-Control:no-cache），和不缓存（响应头里Cache-Control:no-cache）的请求，它在正常的，通过上文方式1访问时，是不会在请求头里添加Cache-Control值的。")]),t._v(" "),s("h2",{attrs:{id:"_5、前端对缓存策略的一个应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、前端对缓存策略的一个应用"}},[t._v("#")]),t._v(" 5、前端对缓存策略的一个应用")]),t._v(" "),s("p",[t._v("单页面应用中")]),t._v(" "),s("ul",[s("li",[t._v("入口文件index.html设置为协商缓存，每次都向服务器发起请求，确定资源是否过期。")]),t._v(" "),s("li",[t._v("其他的资源，css，js这些都会设置成强缓存。因为这些文件名在打包之后会带上hash值，如果修改了内容，那么打包之后因为hash值变化，所以文件名也是会变化的。这些文件在index.html里引入")])]),t._v(" "),s("h2",{attrs:{id:"_6、如何设置请求头里的cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、如何设置请求头里的cache-control"}},[t._v("#")]),t._v(" 6、如何设置请求头里的Cache-Control")]),t._v(" "),s("p",[t._v("在前边的介绍里，请求头里Cache-Control:max-age=0和Cache-Control:no-cache都是浏览器自己的行为，因为加载这个静态资源，如html、js、image等，用户是无法设置响应的Request Header的。")]),t._v(" "),s("h3",{attrs:{id:"标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" "),s("meta"),t._v("标签")]),t._v(" "),s("p",[t._v("开发者能否自己设置html等静态资源的请求头呢，目前没有发现这类方法。值得一提的是html里的")]),s("meta"),t._v("标签，在旧版本里或许可以设置响应的请求头如："),s("p"),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("cache-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("max-age=180"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("cache-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Tue, 01 Jan 1980 1:00:00 GMT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("pragma"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("但这些方法在html5之后，是不会生效的。")]),t._v(" "),s("h3",{attrs:{id:"setrequestheader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setrequestheader"}},[t._v("#")]),t._v(" setRequestHeader")]),t._v(" "),s("p",[t._v("有没有能设置请求头的请求呢，我们会想到js发起的ajax请求，这个请求的Initiator一般是一个js文件。我们可以通过xhr.setRequestHeader()设置一些请求头，比如Cache-Control的值。另外，浏览器对js设置请求头的功能是有限制的，比如host、cookie、user-agent这些是无法被js修改的。")]),t._v(" "),s("p",[t._v("经过笔者的测试")]),t._v(" "),s("ul",[s("li",[t._v("post这种请求，是无法设置Cache-Control和Etag这些值的，在响应头里设置无效，相应的在请求头设置Cache-Control也是没啥用的，不会有缓存。")]),t._v(" "),s("li",[t._v("只发现get请求可以设置，可以在请求头里设置Cache-Control:max-age=0和Cache-Control:no-cache，来实现对应的操作。get请求时可以缓存的，只不过这样的操作并不常见。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);